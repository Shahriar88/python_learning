# Update Conda, setuptools ________________________________________________________________________________________
conda update -n base -c defaults conda
pip install -U pip setuptools wheel


Option A (recommended): use Python 3.12 _______________________________________________________________

# 0) Remove Old env on Python 3.13
conda env remove --name RF_Lunar_Land

# 1) New env on Python 3.12
conda create -n RF_Lunar_Land python=3.12 -y
conda activate RF_Lunar_Land

# 2a) CPU-only PyTorch
conda install pytorch torchvision torchaudio cpuonly -c pytorch

# 2b) Or, GPU build (NVIDIA):
#    pick the CUDA version that matches your driver/toolkit (e.g., 12.1)
conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia -y

# 3) JupyterLab (optional)
conda install -c conda-forge jupyterlab

# 4) Spyder (optional)
conda install -c conda-forge spyder

# 5) Matplotlib (optional)
conda install -c conda-forge matplotlib

# 6) pandas (optional)
conda install -c conda-forge pandas

# 7) numba (optional)
conda install -c conda-forge numba cudatoolkit

A) Numba (CPU only)
conda install -c conda-forge numba
B) Numba with CUDA 12 support (recommended with your cu124 PyTorch)
conda install -c conda-forge numba "cuda-version=12.4" cuda-nvrtc cuda-nvcc -y

#Quick check after install
from numba import cuda
print("Numba CUDA available:", cuda.is_available())
print("Driver version:", cuda.runtime.get_driver_version())

8) install git
conda install git






Option B: keep your current env but drop the 3.13 pin (downgrade Python) _______________________________________________________________

# See if you have pins set
conda config --show pinned_packages

# Remove the Python pin (if present)
conda config --remove pinned_packages "python=3.13"

# Try installing again; the solver will likely choose Python 3.12
conda install pytorch torchvision torchaudio cpuonly -c pytorch
# or for GPU:
conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia

install important libraries:_________________________________________________________


#pip install gym
#pip install gym[box2d]

pip install swig
pip install "gymnasium"
pip install "gymnasium[all]"
pip install Box2D

pip install "gymnasium[box2d]"
pip install gymnasium[mujoco]

pip install flappy-bird-gymnasium

pip install rich

pip uninstall -y numba llvmlite
pip install numba
# llvmlite comes in automatically with numba




python code resources: ____________________________________________________________________________________________

https://www.youtube.com/watch?v=SMZfgeHFFcA&list=PL9jZRDZXEdTHPOiUDM7SZB4cDdcJfQa8M&index=12
https://pylessons.com/LunarLander-v2-PPO/
https://towardsdatascience.com/reinforcement-learning-explained-visually-part-5-deep-q-networks-step-by-step-5a5317197f4b
https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/blob/master/contents/5_Deep_Q_Network/RL_brain.py

https://github.com/philtabor
https://github.com/philtabor/Actor-Critic-Methods-Paper-To-Code/tree/master/ActorCritic
https://github.com/philtabor/Actor-Critic-Methods-Paper-To-Code/tree/master/Reinforce


Install _______________________________________________________________________________________
https://visualstudio.microsoft.com/visual-cpp-build-tools/


# Spyder Noebook 
pip uninstall ruamel.yaml
pip uninstall spyder-notebook
pip install ruamel.yaml==0.17.21
pip install spyder-notebook==0.4.0






#************************************************************************************************************
#************************************************************************************************************
#************************************************************************************************************
---
title: "Hydrocat: GPU Environment & YOLOv8 Setup"
output:
  github_document:
    toc: true
    toc_depth: 2
---

```{r setup, include=FALSE}
# This file is meant as documentation for GitHub.
# By default, chunks won't execute when knitting.
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)

#**************************************************************
conda create --name Hydrocat python=3.12 -y
conda activate Hydrocat
conda install -c conda-forge numba "cuda-version=12.4" cuda-nvrtc cuda-nvcc -y
pip install ultralytics matplotlib pandas jupyterlab jupyter notebook spyder
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121
# pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124





# Yolo
pip install ultralytics -q

# kagglehub is a small helper library for downloading datasets/models directly from Kaggle inside Python.
pip install kagglehub

# downloading datasets and running notebooks
pip install kaggle


# GPU ************************
nvidia-smi
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121


# if error *************************
conda install --yes --force-reinstall python expat pip

python -c "import xml.parsers.expat; print('expat OK')"
python -m pip --version



# Verify CUDA in PyTorch
import torch
print(torch.cuda.is_available())   # Should return True
print(torch.cuda.get_device_name(0))  # Shows your GPU name


import torch
print("CUDA available:", torch.cuda.is_available())
if torch.cuda.is_available():
    print("GPU:", torch.cuda.get_device_name(0))



# Use token for Colab ********************************************************
jupyter server \
  --ServerApp.allow_origin='https://colab.research.google.com' \
  --port=8888 \
  --ServerApp.port_retries=0


jupyter server --ServerApp.allow_origin='https://colab.research.google.com' --port=8888  --ServerApp.port_retries=0

#_______________________________________________________


#_______________________________________________________________________________

# Install ARGoS *********************************************
https://www.argos-sim.info/core.php

Binary Packages for Ubuntu 22.04 LTS 64bit
sudo chmod +x argos3_simulator-3.0.0-x86_64-beta59.deb
sudo apt install ./argos3_simulator-3.0.0-x86_64-beta59.deb 








# matplotlib restarting kernel****************************************************************
import os
os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"   # ⚠️ temporary, evaluation-only
# After matplotlib.plot
os.environ["KMP_DUPLICATE_LIB_OK"] = "FALSE"
#_______________________________________________________________________________



