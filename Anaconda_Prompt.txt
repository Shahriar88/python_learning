# Update Conda, setuptools ________________________________________________________________________________________
conda update -n base -c defaults conda

pip install -U pip setuptools wheel
or
python.exe -m pip install -U pip setuptools wheel

pip install -U pip
pip install opencv-python
pip install ion-python==1.8.10


Option A (recommended): use Python 3.12 _______________________________________________________________

# 0) Remove/Delete Old env on Python 3.13 (One environment at a time)
conda env remove --name RF_Lunar_Land

# 1) New env on Python 3.12
conda create -n RF_Lunar_Land python=3.12 -y
conda activate RF_Lunar_Land

get python version:
python --version

change python version:
conda install python=3.12

# 2a) CPU-only PyTorch
conda install pytorch torchvision torchaudio cpuonly -c pytorch

# 2b) Or, GPU build (NVIDIA):
#    pick the CUDA version that matches your driver/toolkit (e.g., 12.1)
conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia -y

# 3) JupyterLab (optional)
conda install -c conda-forge jupyterlab

# 4) Spyder (optional)
conda install -c conda-forge spyder

# 5) Matplotlib (optional)
conda install -c conda-forge matplotlib

# 6) pandas (optional)
conda install -c conda-forge pandas

# 7) numba (optional)
conda install -c conda-forge numba cudatoolkit

A) Numba (CPU only)
conda install -c conda-forge numba
B) Numba with CUDA 12 support (recommended with your cu124 PyTorch)
conda install -c conda-forge numba "cuda-version=12.4" cuda-nvrtc cuda-nvcc -y

#Quick check after install
from numba import cuda
print("Numba CUDA available:", cuda.is_available())
print("Driver version:", cuda.runtime.get_driver_version())

8) install git
conda install git -y






Option B: keep your current env but drop the 3.13 pin (downgrade Python) _______________________________________________________________

# See if you have pins set
conda config --show pinned_packages

# Remove the Python pin (if present)
conda config --remove pinned_packages "python=3.13"

# Try installing again; the solver will likely choose Python 3.12
conda install pytorch torchvision torchaudio cpuonly -c pytorch -y
# or for GPU:
conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia -y

install important libraries:_________________________________________________________


#pip install gym
#pip install gym[box2d]

pip install swig
pip install "gymnasium"
pip install "gymnasium[all]"
pip install Box2D

pip install "gymnasium[box2d]"
pip install gymnasium[mujoco]

pip install flappy-bird-gymnasium

pip install rich

pip uninstall -y numba llvmlite
pip install numba
# llvmlite comes in automatically with numba




python code resources: ____________________________________________________________________________________________

https://www.youtube.com/watch?v=SMZfgeHFFcA&list=PL9jZRDZXEdTHPOiUDM7SZB4cDdcJfQa8M&index=12
https://pylessons.com/LunarLander-v2-PPO/
https://towardsdatascience.com/reinforcement-learning-explained-visually-part-5-deep-q-networks-step-by-step-5a5317197f4b
https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow/blob/master/contents/5_Deep_Q_Network/RL_brain.py

https://github.com/philtabor
https://github.com/philtabor/Actor-Critic-Methods-Paper-To-Code/tree/master/ActorCritic
https://github.com/philtabor/Actor-Critic-Methods-Paper-To-Code/tree/master/Reinforce


Install _______________________________________________________________________________________
https://visualstudio.microsoft.com/visual-cpp-build-tools/


# Spyder Noebook 
pip uninstall ruamel.yaml
pip uninstall spyder-notebook
pip install ruamel.yaml==0.17.21
pip install spyder-notebook==0.4.0






#************************************************************************************************************
#************************************************************************************************************
#************************************************************************************************************
---
title: "Hydrocat: GPU Environment & YOLOv8 Setup"
output:
  github_document:
    toc: true
    toc_depth: 2
---

```{r setup, include=FALSE}
# This file is meant as documentation for GitHub.
# By default, chunks won't execute when knitting.
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)

#**************************************************************
conda create --name Hydrocat python=3.12 -y
conda activate Hydrocat
conda install -c conda-forge numba "cuda-version=12.4" cuda-nvrtc cuda-nvcc -y
pip install ultralytics matplotlib pandas jupyterlab jupyter notebook spyder
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121
# pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124





# Yolo
pip install ultralytics -q

# kagglehub is a small helper library for downloading datasets/models directly from Kaggle inside Python.
pip install kagglehub

# downloading datasets and running notebooks
pip install kaggle


# GPU ************************
nvidia-smi
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121


# if error *************************
conda install --yes --force-reinstall python expat pip

python -c "import xml.parsers.expat; print('expat OK')"
python -m pip --version



# Verify CUDA in PyTorch
import torch
print(torch.cuda.is_available())   # Should return True
print(torch.cuda.get_device_name(0))  # Shows your GPU name


import torch
print("CUDA available:", torch.cuda.is_available())
if torch.cuda.is_available():
    print("GPU:", torch.cuda.get_device_name(0))



# Use token for Colab ********************************************************
jupyter server \
  --ServerApp.allow_origin='https://colab.research.google.com' \
  --port=8888 \
  --ServerApp.port_retries=0


jupyter server --ServerApp.allow_origin='https://colab.research.google.com' --port=8888  --ServerApp.port_retries=0

#_______________________________________________________


#_______________________________________________________________________________

# Install ARGoS *********************************************
https://www.argos-sim.info/core.php

Binary Packages for Ubuntu 22.04 LTS 64bit
sudo chmod +x argos3_simulator-3.0.0-x86_64-beta59.deb
sudo apt install ./argos3_simulator-3.0.0-x86_64-beta59.deb 








# matplotlib restarting kernel****************************************************************
import os
os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"   # ⚠️ temporary, evaluation-only
# After matplotlib.plot
os.environ["KMP_DUPLICATE_LIB_OK"] = "FALSE"
#_______________________________________________________________________________



# Jetson ________________________________________________
https://github.com/dusty-nv/jetson-containers
https://forums.developer.nvidia.com/t/looking-for-a-pre-built-wheel-for-pytorch-for-jetson-nano/324816/3


# UR10________________________________________
https://pypi.org/project/ur-rtde/
pip install ur-rtde




# Clone Environment __________________________________________
# from the working env
conda activate IR
conda env export --no-builds > IR.yml

# on the new machine/env
conda env create -f IR.yml -n IR_NEW


# Force install wheel______________________________________________________________
unzip - l Toolbox-1.0.0-py3-none-any.whl
pip install Toolbox-1.0.0-py3-none-any.whl --no-deps --force-reinstall --ignore-requires-python


# Troubleshoot__________________________________________________________________

1. ImportError: DLL load failed while importing _C: The operating system cannot run %1.________________________________________________________
That Windows error means PyTorch’s native C/C++ extension (torch._C) couldn’t load—usually a mismatched/corrupt 
install or missing DLLs. Here’s the fastest way to fix it in your div2k conda env.

Quickest fix paths
(suppose your envisronment is div2k)....
Option A — CPU-only (simplest, no CUDA needed)_____________
conda activate div2k
pip uninstall -y torch torchvision torchaudio
conda remove -y pytorch torchvision torchaudio pytorch-cuda cudatoolkit
conda clean -y --all

conda install -y pytorch torchvision torchaudio cpuonly -c pytorch
python -c "import torch; print('OK torch', torch.__version__, 'CUDA?', torch.cuda.is_available())"


Option B — GPU (CUDA 12.1 recommended for Windows)__________

Prereqs: recent NVIDIA driver (≥ 531), don’t mix pip & conda for PyTorch/CUDA.
conda activate div2k
pip uninstall -y torch torchvision torchaudio
conda remove -y pytorch torchvision torchaudio pytorch-cuda cudatoolkit
conda clean -y --all

conda install -y pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia
python -c "import torch; print('OK torch', torch.__version__, 'CUDA?', torch.cuda.is_available(), 'device count', torch.cuda.device_count())"

if Conda fails, try pip _________________
conda activate div2k
pip install --upgrade --force-reinstall --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121











